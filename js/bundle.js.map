{"version":3,"sources":["webpack://halgorithms/./js/main.js","webpack://halgorithms/./js/main_controller.js","webpack://halgorithms/./js/maze.js","webpack://halgorithms/./js/maze_controller.js","webpack://halgorithms/./js/maze_text.js","webpack://halgorithms/./js/util.js","webpack://halgorithms/webpack/bootstrap","webpack://halgorithms/webpack/runtime/define property getters","webpack://halgorithms/webpack/runtime/hasOwnProperty shorthand","webpack://halgorithms/webpack/runtime/make namespace object","webpack://halgorithms/webpack/startup"],"names":["document","addEventListener","mainControl","MainController","MAZE_CONTROLLER","currentFrame","startMazeController","newFrame","stopMazeController","mazeController","MazeController","terminate","EMPTY","WALL","START","FINISH","VISITED","GRID_OFFSET","SQUARE_SIDE","SQUARE_PADDING","DIRECTIONS","Maze","width","height","canvas","ctx","getContext","row","k","push","grid","slice","mazeBuilderOn","startMazeBuilderEvents","solving","delay","createTextDiv","drawSquare","bind","solveBFS","mouseMove","solveMouse","solveManhattan","rightMove","solveRight","pos","value","fillStyle","fillRect","x","y","squareType","console","log","Math","floor","flipTarget","e","inGrid","offsetX","offsetY","convertToGrid","isBuilding","flip","removeElement","bfsText","reload","start","getStart","q","Queue","numSquares","enqueque","square","dequeque","setTimeout","d","neighborX","neighborY","length","mouseText","currentSquare","options","getDirectionOptions","currentDirection","getValue","newDirection","includes","filter","option","random","setValue","acceptableDirection","direction","pos1","pos2","abs","manhattanText","finish","getFinish","PriorityQueue","dist1","manhattan","dist2","add","pop","currentDirectionIndex","right","rightTurn","forwardSquare","rightText","rightWallable","leftTurn","backupGrid","deepDup","draw","CREATE_MAZE_MODE","DEFAULT_MAZE_MODE","SOLVE_MAZE_MODE","SOLVED_MAZE_MODE","createElement","className","callback","switchMode","startMode","mode","currentMode","stopMode","getElementById","parentNode","insertBefore","maze","createMazeText","backup","maze_speed_form","maze_speed_text","createTextNode","appendChild","maze_speed_input","setAttribute","parentId","element","id","parentElement","newElement","onclick","createButton","buttonId","buttonText","newButton","text","textElement","removeChild","queueStart","queueLength","arr","cb","swim","lastIndex","index","swap","retElement","left","a","b","temp","Array","map","ele"],"mappings":";;;;;;;;;;;;;;;AAAA;AAEAA,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,YAAM;AAElD,MAAIC,WAAW,GAAG,IAAIC,4DAAJ,EAAlB;AAED,CAJD,E;;;;;;;;;;;;;;;;;;;;;;;;;CCAA;;AAEA,IAAMC,eAAe,GAAG,iBAAxB,C,CACA;AAGA;;AAEO,IAAMD,cAAb;AACE,4BAAc;AAAA;;AACZ;AAEA;AACA,SAAKE,YAAL,GAAoBD,eAApB;AACA,SAAKE,mBAAL;AACD,GAPH,CASE;;;AATF;AAAA;AAAA,gCAUcC,QAVd,EAUwB;AACpB;AACA,cAAQ,KAAKF,YAAb;AACE,aAAKD,eAAL;AACE,eAAKI,kBAAL;AACA;AAHJ,OAFoB,CAOpB;;;AACA,cAAQD,QAAR;AACE,aAAKH,eAAL;AACE,eAAKE,mBAAL;AACA;AAHJ;;AAKA,WAAKD,YAAL,GAAoBE,QAApB;AACD,KAxBH,CA0BE;;AA1BF;AAAA;AAAA,0CA2BwB;AACpB,WAAKE,cAAL,GAAsB,IAAIC,4DAAJ,EAAtB;AACD,KA7BH,CA+BE;;AA/BF;AAAA;AAAA,yCAgCuB;AACnB,WAAKD,cAAL,CAAoBE,SAApB;AACA,aAAO,KAAKF,cAAZ;AACD;AAnCH;;AAAA;AAAA,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;CAGA;;AACA,IAAMG,KAAK,GAAG,CAAd;AACA,IAAMC,IAAI,GAAG,CAAb;AACA,IAAMC,KAAK,GAAG,CAAd;AACA,IAAMC,MAAM,GAAG,CAAf;AACA,IAAMC,OAAO,GAAG,CAAhB,C,CAEA;;AACA,IAAMC,WAAW,GAAG,CAApB;AACA,IAAMC,WAAW,GAAG,EAApB;AACA,IAAMC,cAAc,GAAG,CAAvB,C,CAEA;;AACA,IAAMC,UAAU,GAAG,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAjB,EAA0B,CAAC,CAAD,EAAI,CAAC,CAAL,CAA1B,CAAnB;AAEO,IAAMC,IAAb;AACE,gBAAYC,KAAZ,EAAmBC,MAAnB,EAA2BC,MAA3B,EAAmC;AAAA;;AACjC;AACA,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACAA,UAAM,CAACF,KAAP,GAAeL,WAAW,GAAC,CAAZ,GAAgBC,WAAW,GAACI,KAA3C;AACAE,UAAM,CAACD,MAAP,GAAgBN,WAAW,GAAC,CAAZ,GAAgBC,WAAW,GAACK,MAA5C;AACA,SAAKE,GAAL,GAAWD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAX,CAPiC,CASjC;;AACA,QAAIC,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAApB,EAA2BM,CAAC,EAA5B;AACED,SAAG,CAACE,IAAJ,CAASjB,KAAT;AADF;;AAEA,SAAKkB,IAAL,GAAY,EAAZ;;AACA,SAAK,IAAIF,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGL,MAApB,EAA4BK,EAAC,EAA7B;AACE,WAAKE,IAAL,CAAUD,IAAV,CAAeF,GAAG,CAACI,KAAJ,EAAf;AADF;;AAGA,SAAKD,IAAL,CAAU,CAAV,EAAa,CAAb,IAAkBhB,KAAlB;AACA,SAAKgB,IAAL,CAAU,KAAKR,KAAL,GAAW,CAArB,EAAwB,KAAKC,MAAL,GAAY,CAApC,IAAyCR,MAAzC,CAlBiC,CAoBjC;;AACA,SAAKiB,aAAL,GAAqB,IAArB;AACA,SAAKC,sBAAL;AACA,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKC,KAAL,GAAa,GAAb;AAEAC,wDAAa,CAAC,aAAD,EAAgB,WAAhB,EAA6B,EAA7B,CAAb,CA1BiC,CA4BjC;;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB,CA7BiC,CA6Ba;;AAC9C,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKE,SAAL,GAAiB,KAAKA,SAAL,CAAeF,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKG,UAAL,GAAkB,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKI,cAAL,GAAsB,KAAKA,cAAL,CAAoBJ,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKK,SAAL,GAAiB,KAAKA,SAAL,CAAeL,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKM,UAAL,GAAkB,KAAKA,UAAL,CAAgBN,IAAhB,CAAqB,IAArB,CAAlB;AACD,GArCH,CAuCE;;;AAvCF;AAAA;AAAA,6BAyCWO,GAzCX,EAyCgB;AACZ,aAAO,KAAKf,IAAL,CAAUe,GAAG,CAAC,CAAD,CAAb,EAAkBA,GAAG,CAAC,CAAD,CAArB,CAAP;AACD;AA3CH;AAAA;AAAA,6BA6CWA,GA7CX,EA6CgBC,KA7ChB,EA6CuB;AACnB,WAAKhB,IAAL,CAAUe,GAAG,CAAC,CAAD,CAAb,EAAkBA,GAAG,CAAC,CAAD,CAArB,IAA4BC,KAA5B;AACD,KA/CH,CAiDE;;AAjDF;AAAA;AAAA,2BAkDS;AACL,WAAKrB,GAAL,CAASsB,SAAT,GAAqB,MAArB;AACA,WAAKtB,GAAL,CAASuB,QAAT,CAAkB,CAAlB,EAAqB,CAArB,EAAwB/B,WAAW,GAAG,CAAd,GAAkB,KAAKK,KAAL,GAAaJ,WAAvD,EAAoED,WAAW,GAAG,CAAd,GAAkB,KAAKM,MAAL,GAAcL,WAApG;;AACA,WAAK,IAAI+B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK3B,KAAzB,EAAgC2B,CAAC,EAAjC,EAAqC;AACnC,aAAK,IAAIC,CAAC,GAAE,CAAZ,EAAeA,CAAC,GAAG,KAAK3B,MAAxB,EAAgC2B,CAAC,EAAjC,EAAqC;AACnC,eAAKb,UAAL,CAAgBY,CAAhB,EAAkBC,CAAlB;AACD;AACF;AACF,KA1DH,CA4DE;;AA5DF;AAAA;AAAA,+BA6DaD,CA7Db,EA6DeC,CA7Df,EA6DkB;AACd,UAAIC,UAAU,GAAG,KAAKrB,IAAL,CAAUmB,CAAV,EAAaC,CAAb,CAAjB;;AACA,cAAQC,UAAR;AACE,aAAKvC,KAAL;AACE,eAAKa,GAAL,CAASsB,SAAT,GAAqB,OAArB;AACA;;AACF,aAAKlC,IAAL;AACE,eAAKY,GAAL,CAASsB,SAAT,GAAqB,OAArB;AACA;;AACF,aAAKjC,KAAL;AACE,eAAKW,GAAL,CAASsB,SAAT,GAAqB,OAArB;AACA;;AACF,aAAKhC,MAAL;AACE,eAAKU,GAAL,CAASsB,SAAT,GAAqB,KAArB;AACA;;AACF,aAAK/B,OAAL;AACE,eAAKS,GAAL,CAASsB,SAAT,GAAqB,OAArB;AACA;;AACF;AACEK,iBAAO,CAACC,GAAR,CAAY,sBAAsBF,UAAlC;AAjBJ;;AAmBA,WAAK1B,GAAL,CAASuB,QAAT,CAAkB/B,WAAW,GAAGgC,CAAC,GAAC/B,WAAhB,GAA8BC,cAAhD,EAAgEF,WAAW,GAAGiC,CAAC,GAAChC,WAAhB,GAA8BC,cAA9F,EACED,WAAW,GAAG,IAAEC,cADlB,EACkCD,WAAW,GAAG,IAAEC,cADlD;AAED,KApFH,CAsFE;;AAtFF;AAAA;AAAA,2BAuFS8B,CAvFT,EAuFYC,CAvFZ,EAuFe;AACX,aAAQD,CAAC,GAAGhC,WAAL,IAAsBiC,CAAC,GAAGjC,WAA1B,IACDgC,CAAC,GAAGhC,WAAW,GAAG,KAAKK,KAAL,GAAWJ,WAD5B,IAEDgC,CAAC,GAAGjC,WAAW,GAAG,KAAKM,MAAL,GAAYL,WAFpC;AAGD,KA3FH,CA6FE;;AA7FF;AAAA;AAAA,kCA8FgB+B,CA9FhB,EA8FmBC,CA9FnB,EA8FsB;AAClB,aAAO,CAACI,IAAI,CAACC,KAAL,CAAW,CAACN,CAAC,GAAChC,WAAH,IAAgBC,WAA3B,CAAD,EACLoC,IAAI,CAACC,KAAL,CAAW,CAACL,CAAC,GAACjC,WAAH,IAAgBC,WAA3B,CADK,CAAP;AAGD,KAlGH,CAoGE;;AApGF;AAAA;AAAA,yBAqGO+B,CArGP,EAqGSC,CArGT,EAqGY;AACR,UAAI,KAAKpB,IAAL,CAAUmB,CAAV,EAAaC,CAAb,KAAmB,KAAKM,UAA5B,EAAwC;AACtC,aAAK1B,IAAL,CAAUmB,CAAV,EAAaC,CAAb,IAAkB,KAAKpB,IAAL,CAAUmB,CAAV,EAAaC,CAAb,KAAmBrC,IAAnB,GAA0BD,KAA1B,GAAkCC,IAApD;AACA,aAAKwB,UAAL,CAAgBY,CAAhB,EAAkBC,CAAlB;AACD;AACF,KA1GH,CA4GE;;AA5GF;AAAA;AAAA,6CA6G2B;AAAA;;AACvB,WAAK1B,MAAL,CAAYvB,gBAAZ,CAA6B,WAA7B,EAA0C,UAAAwD,CAAC,EAAI;AAC7C,YAAI,KAAI,CAACzB,aAAT,EAAwB;AACtB,cAAI,KAAI,CAAC0B,MAAL,CAAYD,CAAC,CAACE,OAAd,EAAuBF,CAAC,CAACG,OAAzB,CAAJ,EAAuC;AACrC,gBAAIf,GAAG,GAAG,KAAI,CAACgB,aAAL,CAAmBJ,CAAC,CAACE,OAArB,EAA8BF,CAAC,CAACG,OAAhC,CAAV;;AADqC,sCAExBf,GAFwB;AAAA,gBAEhCI,CAFgC;AAAA,gBAE7BC,CAF6B;;AAGrC,gBAAI,KAAI,CAACpB,IAAL,CAAUmB,CAAV,EAAaC,CAAb,KAAmBtC,KAAnB,IAA4B,KAAI,CAACkB,IAAL,CAAUmB,CAAV,EAAaC,CAAb,KAAmBrC,IAAnD,EAAyD;AACvD,mBAAI,CAACiD,UAAL,GAAkB,IAAlB;AACA,mBAAI,CAACN,UAAL,GAAkB,KAAI,CAAC1B,IAAL,CAAUmB,CAAV,EAAaC,CAAb,CAAlB;;AACA,mBAAI,CAACa,IAAL,CAAUd,CAAV,EAAYC,CAAZ;AACD;AACF;AACF;AACF,OAZD;AAcA,WAAK1B,MAAL,CAAYvB,gBAAZ,CAA6B,WAA7B,EAA0C,UAAAwD,CAAC,EAAI;AAC7C,YAAI,KAAI,CAACK,UAAT,EAAqB;AACnB,cAAI,KAAI,CAACJ,MAAL,CAAYD,CAAC,CAACE,OAAd,EAAuBF,CAAC,CAACG,OAAzB,CAAJ,EAAuC;AAAA,sCACxB,KAAI,CAACC,aAAL,CAAmBJ,CAAC,CAACE,OAArB,EAA8BF,CAAC,CAACG,OAAhC,CADwB;AAAA;AAAA,gBAChCX,CADgC;AAAA,gBAC7BC,CAD6B;;AAErC,iBAAI,CAACa,IAAL,CAAUd,CAAV,EAAaC,CAAb;AACD;AACF;AACF,OAPD;AASA,WAAK1B,MAAL,CAAYvB,gBAAZ,CAA6B,SAA7B,EAAwC,UAAAwD,CAAC,EAAI;AAC3C,YAAI,KAAI,CAACK,UAAT,EAAqB;AACnB,eAAI,CAACA,UAAL,GAAkB,KAAlB;AACD;AACF,OAJD;AAKD;AA1IH;AAAA;AAAA,+BA4Ia;AAAA;;AACT,UAAI,KAAK5B,OAAT,EACE;AACF,WAAKA,OAAL,GAAe,IAAf;AAEA8B,0DAAa,CAAC,WAAD,CAAb;AACA5B,0DAAa,CAAC,aAAD,EAAgB,WAAhB,EAA6B6B,+CAA7B,CAAb;AAEA,WAAKC,MAAL;AACA,UAAIC,KAAK,GAAG,KAAKC,QAAL,EAAZ;AACA,UAAIC,CAAC,GAAG,IAAIC,wCAAJ,EAAR;AACA,UAAIC,UAAU,GAAG,CAAjB;AACAF,OAAC,CAACG,QAAF,CAAWL,KAAX;;AAZS;AAcP,YAAIM,MAAM,GAAGJ,CAAC,CAACK,QAAF,EAAb;AACA,YAAI,MAAI,CAAC5C,IAAL,CAAU2C,MAAM,CAAC,CAAD,CAAhB,EAAqBA,MAAM,CAAC,CAAD,CAA3B,MAAoCzD,OAAxC,EACE;;AACF,YAAI,MAAI,CAACc,IAAL,CAAU2C,MAAM,CAAC,CAAD,CAAhB,EAAqBA,MAAM,CAAC,CAAD,CAA3B,MAAoC1D,MAAxC,EAAgD;AAC9C;AACA4D,oBAAU,CAAC;AAAA,mBAAM,MAAI,CAACzC,OAAL,GAAe,KAArB;AAAA,WAAD,EAA6B,MAAI,CAACC,KAAL,IAAYoC,UAAU,GAAC,CAAvB,CAA7B,CAAV;AACA;AACD;;AAED,cAAI,CAACzC,IAAL,CAAU2C,MAAM,CAAC,CAAD,CAAhB,EAAqBA,MAAM,CAAC,CAAD,CAA3B,IAAkCzD,OAAlC;AACA2D,kBAAU,CAAC;AAAA,iBAAM,MAAI,CAACtC,UAAL,CAAgBoC,MAAM,CAAC,CAAD,CAAtB,EAA2BA,MAAM,CAAC,CAAD,CAAjC,CAAN;AAAA,SAAD,EAA8C,MAAI,CAACtC,KAAL,IAAYoC,UAAU,GAAG,CAAzB,CAA9C,CAAV;AACAA,kBAAU;;AAEV,aAAK,IAAIK,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACtB,cAAIC,SAAS,GAAGJ,MAAM,CAAC,CAAD,CAAN,GAAYrD,UAAU,CAACwD,CAAD,CAAV,CAAc,CAAd,CAA5B;AACA,cAAIE,SAAS,GAAGL,MAAM,CAAC,CAAD,CAAN,GAAYrD,UAAU,CAACwD,CAAD,CAAV,CAAc,CAAd,CAA5B;AACA,cAAIC,SAAS,GAAG,CAAZ,IAAiBA,SAAS,IAAI,MAAI,CAACvD,KAAnC,IAA4CwD,SAAS,GAAG,CAAxD,IAA6DA,SAAS,IAAI,MAAI,CAACvD,MAAnF,EACE;AACF,cAAI,MAAI,CAACO,IAAL,CAAU+C,SAAV,EAAqBC,SAArB,KAAmClE,KAAnC,IAA4C,MAAI,CAACkB,IAAL,CAAU+C,SAAV,EAAqBC,SAArB,KAAmC/D,MAAnF,EACEsD,CAAC,CAACG,QAAF,CAAW,CAACK,SAAD,EAAYC,SAAZ,CAAX;AACH;AAlCM;;AAaT,aAAOT,CAAC,CAACU,MAAF,KAAa,CAApB,EAAuB;AAAA;;AAAA,iCAGnB;AAHmB,8BAOnB;AAeH;;AACDJ,gBAAU,CAAC;AAAA,eAAM,MAAI,CAACzC,OAAL,GAAe,KAArB;AAAA,OAAD,EAA6B,KAAKC,KAAL,IAAcoC,UAAU,GAAC,CAAzB,CAA7B,CAAV;AACD,KAjLH,CAmLE;;AAnLF;AAAA;AAAA,+BAoLa;AACT,WAAK,IAAItB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK3B,KAAzB,EAAgC2B,CAAC,EAAjC,EAAqC;AACnC,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK3B,MAAzB,EAAiC2B,CAAC,EAAlC,EAAsC;AACpC,cAAI,KAAKpB,IAAL,CAAUmB,CAAV,EAAaC,CAAb,KAAmBpC,KAAvB,EACE,OAAO,CAACmC,CAAD,EAAGC,CAAH,CAAP;AACH;AACF;;AACDE,aAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,KA5LH,CA8LE;;AA9LF;AAAA;AAAA,gCA+Lc;AACV,WAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK3B,KAAzB,EAAgC2B,CAAC,EAAjC,EAAqC;AACnC,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK3B,MAAzB,EAAiC2B,CAAC,EAAlC,EAAsC;AACpC,cAAI,KAAKpB,IAAL,CAAUmB,CAAV,EAAaC,CAAb,KAAmBnC,MAAvB,EACE,OAAO,CAACkC,CAAD,EAAGC,CAAH,CAAP;AACH;AACF;;AACDE,aAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,KAvMH,CAyME;;AAzMF;AAAA;AAAA,iCA0Me;AACX,UAAI,KAAKnB,OAAT,EACE;AACF,WAAKA,OAAL,GAAe,IAAf;AAEA8B,0DAAa,CAAC,WAAD,CAAb;AACA5B,0DAAa,CAAC,aAAD,EAAgB,WAAhB,EAA6B4C,iDAA7B,CAAb;AAEA,WAAKd,MAAL;AACA,UAAIe,aAAa,GAAG,KAAKb,QAAL,EAApB;AACA,UAAIc,OAAO,GAAG,KAAKC,mBAAL,CAAyBF,aAAzB,CAAd;;AAEA,UAAIC,OAAO,CAACH,MAAR,IAAkB,CAAtB,EAAyB;AACvB3B,eAAO,CAACC,GAAR,CAAY,0BAAZ;AACA;AACD;;AAED,WAAKb,SAAL,CAAeyC,aAAf,EAA8BC,OAAO,CAAC,CAAD,CAArC;AACD;AA5NH;AAAA;AAAA,8BA8NYD,aA9NZ,EA8N2BG,gBA9N3B,EA8N6C;AAAA;;AAEzC,UAAI,KAAKC,QAAL,CAAcJ,aAAd,KAAgClE,MAApC,EAA4C;AAC1C,aAAKmB,OAAL,GAAe,KAAf;AACA;AACD;;AAED,UAAIgD,OAAO,GAAG,KAAKC,mBAAL,CAAyBF,aAAzB,CAAd;AACA,UAAIK,YAAY,GAAGF,gBAAnB;AAEA,UAAIF,OAAO,CAACH,MAAR,IAAkB,CAAtB,EACEO,YAAY,GAAGJ,OAAO,CAAC,CAAD,CAAtB;;AAEF,UAAIA,OAAO,CAACH,MAAR,IAAkB,CAAlB,IAAuB,CAACG,OAAO,CAACK,QAAR,CAAiBH,gBAAjB,CAA5B,EAAgE;AAC9DF,eAAO,GAAGA,OAAO,CAACM,MAAR,CAAe,UAACC,MAAD;AAAA,iBACzBA,MAAM,CAAC,CAAD,CAAN,IAAa,CAAC,CAAD,GAAKL,gBAAgB,CAAC,CAAD,CAAlC,IAAyCK,MAAM,CAAC,CAAD,CAAN,IAAa,CAAC,CAAD,GAAKL,gBAAgB,CAAC,CAAD,CADlD;AAAA,SAAf,CAAV;AAEAE,oBAAY,GAAGJ,OAAO,CAAC,CAAD,CAAtB;AACD;;AAED,UAAIA,OAAO,CAACH,MAAR,IAAkB,CAAtB,EAAyB;AACvBG,eAAO,GAAGA,OAAO,CAACM,MAAR,CAAe,UAACC,MAAD;AAAA,iBACvBA,MAAM,CAAC,CAAD,CAAN,IAAa,CAAC,CAAD,GAAKL,gBAAgB,CAAC,CAAD,CAAlC,IAAyCK,MAAM,CAAC,CAAD,CAAN,IAAa,CAAC,CAAD,GAAKL,gBAAgB,CAAC,CAAD,CADpD;AAAA,SAAf,CAAV;AAEAE,oBAAY,GAAGJ,OAAO,CAAC5B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACoC,MAAL,KAAgBR,OAAO,CAACH,MAAnC,CAAD,CAAtB;AACD;;AAED,UAAI,KAAKM,QAAL,CAAcJ,aAAd,KAAgCjE,OAApC,EAA6C;AAC3C,aAAK2E,QAAL,CAAcV,aAAd,EAA6BrE,KAA7B;AACA,aAAKyB,UAAL,CAAgB4C,aAAa,CAAC,CAAD,CAA7B,EAAkCA,aAAa,CAAC,CAAD,CAA/C;AACD;;AAEDA,mBAAa,CAAC,CAAD,CAAb,IAAoBK,YAAY,CAAC,CAAD,CAAhC;AACAL,mBAAa,CAAC,CAAD,CAAb,IAAoBK,YAAY,CAAC,CAAD,CAAhC;AAEA,UAAI,KAAKD,QAAL,CAAcJ,aAAd,KAAgCrE,KAApC,EACE,KAAK+E,QAAL,CAAcV,aAAd,EAA6BjE,OAA7B;AACF,WAAKqB,UAAL,CAAgB4C,aAAa,CAAC,CAAD,CAA7B,EAAkCA,aAAa,CAAC,CAAD,CAA/C;AAEAN,gBAAU,CAAC;AAAA,eAAM,MAAI,CAACnC,SAAL,CAAeyC,aAAf,EAA8BK,YAA9B,CAAN;AAAA,OAAD,EAAoD,KAAKnD,KAAzD,CAAV;AACD;AApQH;AAAA;AAAA,wCAsQsBsC,MAtQtB,EAsQ8B;AAC1B,UAAIS,OAAO,GAAG,EAAd;;AACA,WAAK,IAAIN,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACtB,YAAI,KAAKgB,mBAAL,CAAyBnB,MAAzB,EAAiCrD,UAAU,CAACwD,CAAD,CAA3C,CAAJ,EACEM,OAAO,CAACrD,IAAR,CAAaT,UAAU,CAACwD,CAAD,CAAvB;AACH;;AACD,aAAOM,OAAP;AACD;AA7QH;AAAA;AAAA,wCA+QsBT,MA/QtB,EA+Q8BoB,SA/Q9B,EA+QyC;AACrC,UAAIhB,SAAS,GAAGJ,MAAM,CAAC,CAAD,CAAN,GAAYoB,SAAS,CAAC,CAAD,CAArC;AACA,UAAIf,SAAS,GAAGL,MAAM,CAAC,CAAD,CAAN,GAAYoB,SAAS,CAAC,CAAD,CAArC;AACA,UAAIhB,SAAS,GAAG,CAAZ,IAAiBA,SAAS,IAAI,KAAKvD,KAAnC,IAA4CwD,SAAS,GAAG,CAAxD,IAA6DA,SAAS,IAAI,KAAKvD,MAAnF,EACE,OAAO,KAAP;AACF,UAAI,KAAKO,IAAL,CAAU+C,SAAV,EAAqBC,SAArB,KAAmCjE,IAAvC,EACE,OAAO,KAAP;AACF,aAAO,IAAP;AACD;AAvRH;AAAA;AAAA,8BAyRYiF,IAzRZ,EAyRkBC,IAzRlB,EAyRwB;AACpB,aAAOzC,IAAI,CAAC0C,GAAL,CAASF,IAAI,CAAC,CAAD,CAAJ,GAAQC,IAAI,CAAC,CAAD,CAArB,IAA4BzC,IAAI,CAAC0C,GAAL,CAASF,IAAI,CAAC,CAAD,CAAJ,GAAQC,IAAI,CAAC,CAAD,CAArB,CAAnC;AACD;AA3RH;AAAA;AAAA,qCA6RmB;AAAA;;AACf,UAAI,KAAK7D,OAAT,EACE;AACF,WAAKA,OAAL,GAAe,IAAf;AAEA8B,0DAAa,CAAC,WAAD,CAAb;AACA5B,0DAAa,CAAC,aAAD,EAAgB,WAAhB,EAA6B6D,qDAA7B,CAAb;AAEA,WAAK/B,MAAL;AACA,UAAIgC,MAAM,GAAG,KAAKC,SAAL,EAAb;AACA,UAAIhC,KAAK,GAAG,KAAKC,QAAL,EAAZ;AACA,UAAIC,CAAC,GAAG,IAAI+B,gDAAJ,CAAkB,UAACN,IAAD,EAAOC,IAAP,EAAgB;AACxC,YAAIM,KAAK,GAAG,MAAI,CAACC,SAAL,CAAeR,IAAf,EAAqBI,MAArB,CAAZ;;AACA,YAAIK,KAAK,GAAG,MAAI,CAACD,SAAL,CAAeP,IAAf,EAAqBG,MAArB,CAAZ;;AACA,YAAIG,KAAK,GAAGE,KAAZ,EACE,OAAO,CAAC,CAAR,CADF,KAEK,IAAIF,KAAK,GAAGE,KAAZ,EACH,OAAO,CAAP,CADG,KAGH,OAAO,CAAP;AACH,OATO,CAAR;AAUA,UAAIhC,UAAU,GAAG,CAAjB;AACAF,OAAC,CAACmC,GAAF,CAAMrC,KAAN;;AAtBe;AAwBb,YAAIM,MAAM,GAAGJ,CAAC,CAACoC,GAAF,EAAb;AACA,YAAI,MAAI,CAAC3E,IAAL,CAAU2C,MAAM,CAAC,CAAD,CAAhB,EAAqBA,MAAM,CAAC,CAAD,CAA3B,MAAoCzD,OAAxC,EACE;;AACF,YAAI,MAAI,CAACc,IAAL,CAAU2C,MAAM,CAAC,CAAD,CAAhB,EAAqBA,MAAM,CAAC,CAAD,CAA3B,MAAoC1D,MAAxC,EAAgD;AAC9C;AACA4D,oBAAU,CAAC;AAAA,mBAAM,MAAI,CAACzC,OAAL,GAAe,KAArB;AAAA,WAAD,EAA6B,MAAI,CAACC,KAAL,IAAYoC,UAAU,GAAC,CAAvB,CAA7B,CAAV;AACA;AACD;;AAED,cAAI,CAACzC,IAAL,CAAU2C,MAAM,CAAC,CAAD,CAAhB,EAAqBA,MAAM,CAAC,CAAD,CAA3B,IAAkCzD,OAAlC;AACA2D,kBAAU,CAAC;AAAA,iBAAM,MAAI,CAACtC,UAAL,CAAgBoC,MAAM,CAAC,CAAD,CAAtB,EAA2BA,MAAM,CAAC,CAAD,CAAjC,CAAN;AAAA,SAAD,EAA8C,MAAI,CAACtC,KAAL,IAAYoC,UAAU,GAAG,CAAzB,CAA9C,CAAV;AACAA,kBAAU;;AAEV,aAAK,IAAIK,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACtB,cAAIC,SAAS,GAAGJ,MAAM,CAAC,CAAD,CAAN,GAAYrD,UAAU,CAACwD,CAAD,CAAV,CAAc,CAAd,CAA5B;AACA,cAAIE,SAAS,GAAGL,MAAM,CAAC,CAAD,CAAN,GAAYrD,UAAU,CAACwD,CAAD,CAAV,CAAc,CAAd,CAA5B;AACA,cAAIC,SAAS,GAAG,CAAZ,IAAiBA,SAAS,IAAI,MAAI,CAACvD,KAAnC,IAA4CwD,SAAS,GAAG,CAAxD,IAA6DA,SAAS,IAAI,MAAI,CAACvD,MAAnF,EACE;AACF,cAAI,MAAI,CAACO,IAAL,CAAU+C,SAAV,EAAqBC,SAArB,KAAmClE,KAAnC,IAA4C,MAAI,CAACkB,IAAL,CAAU+C,SAAV,EAAqBC,SAArB,KAAmC/D,MAAnF,EACEsD,CAAC,CAACmC,GAAF,CAAM,CAAC3B,SAAD,EAAYC,SAAZ,CAAN;AACH;AA5CY;;AAuBf,aAAOT,CAAC,CAACU,MAAF,KAAa,CAApB,EAAuB;AAAA;;AAAA,kCAGnB;AAHmB,+BAOnB;AAeH;;AACDJ,gBAAU,CAAC;AAAA,eAAM,MAAI,CAACzC,OAAL,GAAe,KAArB;AAAA,OAAD,EAA6B,KAAKC,KAAL,IAAcoC,UAAU,GAAC,CAAzB,CAA7B,CAAV;AACD,KA5UH,CA8UE;;AA9UF;AAAA;AAAA,8BAgVYK,CAhVZ,EAgVe;AACX,aAAO,CAACA,CAAC,GAAC,CAAH,IAAM,CAAb;AACD;AAlVH;AAAA;AAAA,6BAoVWA,CApVX,EAoVc;AACV,aAAO,CAACA,CAAC,GAAC,CAAH,IAAM,CAAb;AACD;AAtVH;AAAA;AAAA,kCAwVgBK,aAxVhB,EAwV+ByB,qBAxV/B,EAwVsD;AAClD,UAAIC,KAAK,GAAG,KAAKC,SAAL,CAAeF,qBAAf,CAAZ;AACA,UAAIG,aAAa,GAAG5B,aAAa,CAAClD,KAAd,EAApB;AACA8E,mBAAa,CAAC,CAAD,CAAb,IAAoBzF,UAAU,CAACuF,KAAD,CAAV,CAAkB,CAAlB,CAApB;AACAE,mBAAa,CAAC,CAAD,CAAb,IAAoBzF,UAAU,CAACuF,KAAD,CAAV,CAAkB,CAAlB,CAApB;AACA,aAAOE,aAAa,CAAC,CAAD,CAAb,GAAmB,CAAnB,IACLA,aAAa,CAAC,CAAD,CAAb,IAAoB,KAAKvF,KADpB,IAELuF,aAAa,CAAC,CAAD,CAAb,GAAmB,CAFd,IAGLA,aAAa,CAAC,CAAD,CAAb,IAAoB,KAAKtF,MAHpB,IAIL,KAAK8D,QAAL,CAAcwB,aAAd,KAAgChG,IAJlC;AAKD;AAlWH;AAAA;AAAA,iCAoWe;AACX,UAAI,KAAKqB,OAAT,EACE;AACF,WAAKA,OAAL,GAAe,IAAf;AAEA8B,0DAAa,CAAC,WAAD,CAAb;AACA5B,0DAAa,CAAC,aAAD,EAAgB,WAAhB,EAA6B0E,iDAA7B,CAAb;AAEA,WAAK5C,MAAL;AACA,UAAIe,aAAa,GAAG,KAAKb,QAAL,EAApB;AACA,UAAIsC,qBAAqB,GAAG,CAA5B;AAEA,UAAIxB,OAAO,GAAG,KAAKC,mBAAL,CAAyBF,aAAzB,CAAd;;AACA,UAAIC,OAAO,CAACH,MAAR,IAAkB,CAAtB,EAAyB;AACvB3B,eAAO,CAACC,GAAR,CAAY,0BAAZ;AACA;AACD;;AAED,WAAKV,SAAL,CAAesC,aAAf,EAA8ByB,qBAA9B;AACD;AAvXH;AAAA;AAAA,8BAyXYzB,aAzXZ,EAyX2ByB,qBAzX3B,EAyXkD;AAAA;;AAC9C,UAAI,KAAKrB,QAAL,CAAcJ,aAAd,KAAgClE,MAApC,EAA4C;AAC1C,aAAKmB,OAAL,GAAe,KAAf;AACA;AACD;;AAED,UAAI,KAAK6E,aAAL,CAAmB9B,aAAnB,EAAkCyB,qBAAlC,CAAJ,EAA8D;AAC5D,eAAO,CAAC,KAAKd,mBAAL,CAAyBX,aAAzB,EAAwC7D,UAAU,CAACsF,qBAAD,CAAlD,CAAR;AACEA,+BAAqB,GAAG,KAAKM,QAAL,CAAcN,qBAAd,CAAxB;AADF;AAED,OAHD,MAIEA,qBAAqB,GAAG,KAAKE,SAAL,CAAeF,qBAAf,CAAxB;;AAEF,UAAI,KAAKrB,QAAL,CAAcJ,aAAd,KAAgCjE,OAApC,EAA6C;AAC3C,aAAK2E,QAAL,CAAcV,aAAd,EAA6BrE,KAA7B;AACA,aAAKyB,UAAL,CAAgB4C,aAAa,CAAC,CAAD,CAA7B,EAAkCA,aAAa,CAAC,CAAD,CAA/C;AACD;;AAEDA,mBAAa,CAAC,CAAD,CAAb,IAAoB7D,UAAU,CAACsF,qBAAD,CAAV,CAAkC,CAAlC,CAApB;AACAzB,mBAAa,CAAC,CAAD,CAAb,IAAoB7D,UAAU,CAACsF,qBAAD,CAAV,CAAkC,CAAlC,CAApB;AAEA,UAAI,KAAKrB,QAAL,CAAcJ,aAAd,KAAgCrE,KAApC,EACE,KAAK+E,QAAL,CAAcV,aAAd,EAA6BjE,OAA7B;AACF,WAAKqB,UAAL,CAAgB4C,aAAa,CAAC,CAAD,CAA7B,EAAkCA,aAAa,CAAC,CAAD,CAA/C;AACAN,gBAAU,CAAC;AAAA,eAAM,MAAI,CAAChC,SAAL,CAAesC,aAAf,EAA8ByB,qBAA9B,CAAN;AAAA,OAAD,EAA6D,KAAKvE,KAAlE,CAAV;AACD,KAjZH,CAmZE;;AAnZF;AAAA;AAAA,6BAqZW;AACP,WAAK8E,UAAL,GAAkBC,8CAAO,CAAC,KAAKpF,IAAN,CAAzB;AACD;AAvZH;AAAA;AAAA,6BAyZW;AACP,WAAKA,IAAL,GAAYoF,8CAAO,CAAC,KAAKD,UAAN,CAAnB;AACA,WAAKE,IAAL;AACD;AA5ZH;;AAAA;AAAA,I;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;CAGA;AACA;;AACA,IAAMC,gBAAgB,GAAG,kBAAzB;AACA,IAAMC,iBAAiB,GAAG,mBAA1B;AACA,IAAMC,eAAe,GAAG,iBAAxB;AACA,IAAMC,gBAAgB,GAAG,kBAAzB;AAEO,IAAM7G,cAAb;AACE,4BAAc;AAAA;;AAAA;;AAEZ;AACA8G,wDAAa,CAAC,aAAD,EAAgB,KAAhB,EAAuB,UAAvB,EAAmC;AAACC,eAAS,EAAE;AAAZ,KAAnC,CAAb;AACArF,wDAAa,CAAC,UAAD,EAAa,sBAAb,EAAqC,aAArC,EACX;AAACsF,cAAQ,EAAE;AAAA,eAAM,KAAI,CAACC,UAAL,CAAgBP,gBAAhB,CAAN;AAAA,OAAX;AAAoDK,eAAS,EAAE;AAA/D,KADW,CAAb;AAEArF,wDAAa,CAAC,UAAD,EAAa,qBAAb,EAAoC,YAApC,EACb;AAACsF,cAAQ,EAAE;AAAA,eAAM,KAAI,CAACC,UAAL,CAAgBL,eAAhB,CAAN;AAAA,OAAX;AAAmDG,eAAS,EAAE;AAA9D,KADa,CAAb,CANY,CAUZ;;AACA,SAAKG,SAAL,CAAeR,gBAAf,EAXY,CAaZ;;AACA,SAAKO,UAAL,GAAkB,KAAKA,UAAL,CAAgBrF,IAAhB,CAAqB,IAArB,CAAlB;AACD,GAhBH,CAkBE;;;AAlBF;AAAA;AAAA,+BAoBauF,IApBb,EAoBmB;AACf,UAAIA,IAAI,KAAK,KAAKC,WAAlB,EACE;AACF,WAAKC,QAAL,CAAc,KAAKD,WAAnB;AACA,WAAKF,SAAL,CAAeC,IAAf;AACD,KAzBH,CA6BE;;AA7BF;AAAA;AAAA,8BA8BYA,IA9BZ,EA8BkB;AAAA;;AACd,cAAQA,IAAR;AACE,aAAKT,gBAAL;AACE;AACA,cAAI,KAAK5F,MAAT,EAAiB;AACfwC,gEAAa,CAAC,QAAD,CAAb;AAEL;;AACGwD,8DAAa,CAAC,gBAAD,EAAmB,QAAnB,EAA6B,QAA7B,CAAb;AACA,eAAKhG,MAAL,GAAcxB,QAAQ,CAACgI,cAAT,CAAwB,QAAxB,CAAd;AACA,eAAKxG,MAAL,CAAYyG,UAAZ,CAAuBC,YAAvB,CAAoC,KAAK1G,MAAzC,EAAiDxB,QAAQ,CAACgI,cAAT,CAAwB,aAAxB,CAAjD;AACA,eAAKG,IAAL,GAAY,IAAI9G,uCAAJ,CAAS,EAAT,EAAa,EAAb,EAAiB,KAAKG,MAAtB,CAAZ;AACA,eAAK2G,IAAL,CAAUhB,IAAV;AAEA/E,8DAAa,CAAC,aAAD,EAAgB,kBAAhB,EAAoCgG,sDAApC,CAAb;AAEA;;AAEA,aAAKd,eAAL;AACE;AACA,eAAKa,IAAL,CAAUE,MAAV;AAGAjG,8DAAa,CAAC,aAAD,EAAgB,oBAAhB,EAAsC,iCAAtC,EACX;AAACsF,oBAAQ,EAAE,KAAKS,IAAL,CAAU5F,QAArB;AAA+BkF,qBAAS,EAAE;AAA1C,WADW,CAAb;AAEArF,8DAAa,CAAC,aAAD,EAAgB,sBAAhB,EAAwC,mCAAxC,EACX;AAACsF,oBAAQ,EAAE,KAAKS,IAAL,CAAU1F,UAArB;AAAiCgF,qBAAS,EAAE;AAA5C,WADW,CAAb;AAEArF,8DAAa,CAAC,aAAD,EAAgB,0BAAhB,EAA4C,oCAA5C,EACX;AAACsF,oBAAQ,EAAE,KAAKS,IAAL,CAAUzF,cAArB;AAAqC+E,qBAAS,EAAE;AAAhD,WADW,CAAb;AAEArF,8DAAa,CAAC,aAAD,EAAgB,sBAAhB,EAAwC,sCAAxC,EACX;AAACsF,oBAAQ,EAAE,KAAKS,IAAL,CAAUvF,UAArB;AAAiC6E,qBAAS,EAAE;AAA5C,WADW,CAAb;AAIAD,8DAAa,CAAC,aAAD,EAAgB,MAAhB,EAAwB,iBAAxB,CAAb;AACA,cAAIc,eAAe,GAAGtI,QAAQ,CAACgI,cAAT,CAAwB,iBAAxB,CAAtB;AACA,cAAIO,eAAe,GAAGvI,QAAQ,CAACwI,cAAT,CAAwB,cAAxB,CAAtB;AACAF,yBAAe,CAACG,WAAhB,CAA4BF,eAA5B;AACAf,8DAAa,CAAC,iBAAD,EAAoB,OAApB,EAA6B,kBAA7B,CAAb;AACA,cAAIkB,gBAAgB,GAAG1I,QAAQ,CAACgI,cAAT,CAAwB,kBAAxB,CAAvB;AACAU,0BAAgB,CAACC,YAAjB,CAA8B,MAA9B,EAAsC,OAAtC;AACAD,0BAAgB,CAACC,YAAjB,CAA8B,KAA9B,EAAqC,IAArC;AACAD,0BAAgB,CAACC,YAAjB,CAA8B,KAA9B,EAAqC,KAArC;AACAD,0BAAgB,CAACC,YAAjB,CAA8B,OAA9B,EAAuC,IAAvC;AACAD,0BAAgB,CAACzI,gBAAjB,CAAkC,QAAlC,EAA4C,UAACwD,CAAD;AAAA,mBAAO,MAAI,CAAC0E,IAAL,CAAUhG,KAAV,GAAkBnC,QAAQ,CAACgI,cAAT,CAAwB,kBAAxB,EAA4ClF,KAArE;AAAA,WAA5C;AACA;AA3CN;;AA6CA,WAAKgF,WAAL,GAAmBD,IAAnB;AACD,KA7EH,CA+EE;;AA/EF;AAAA;AAAA,6BAgFWA,IAhFX,EAgFiB;AACb,cAAQA,IAAR;AACE,aAAKT,gBAAL;AACE;AACA,eAAKe,IAAL,CAAUnG,aAAV,GAA0B,KAA1B;AACAgC,8DAAa,CAAC,kBAAD,CAAb;AACA;;AACF,aAAKsD,eAAL;AACE;AACAtD,8DAAa,CAAC,WAAD,CAAb;AACAA,8DAAa,CAAC,oBAAD,CAAb;AACAA,8DAAa,CAAC,sBAAD,CAAb;AACAA,8DAAa,CAAC,0BAAD,CAAb;AACAA,8DAAa,CAAC,sBAAD,CAAb;AACAA,8DAAa,CAAC,iBAAD,CAAb;AACA;AAdJ;AAgBD,KAjGH,CAmGE;;AAnGF;AAAA;AAAA,gCAoGc;AAEVA,0DAAa,CAAC,UAAD,CAAb;AAED;AAxGH;;AAAA;AAAA,I;;;;;;;;;;;;;;;;;;;;;;;;;;ACTO,IAAMoE,cAAc,GAAG,kMAAvB;AACA,IAAMnE,OAAO,GAAG,ivBAAhB;AACA,IAAMe,SAAS,GAAG,6mBAAlB;AACA,IAAMiB,aAAa,GAAG,g+BAAtB;AACA,IAAMa,SAAS,GAAG,mXAAlB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNP;AAEO,SAASU,aAAT,CAAuBoB,QAAvB,EAAiCC,OAAjC,EAA0CC,EAA1C,EAA4D;AAAA,MAAd5D,OAAc,uEAAJ,EAAI;AACjE,MAAI6D,aAAa,GAAG/I,QAAQ,CAACgI,cAAT,CAAwBY,QAAxB,CAApB;AACA,MAAII,UAAU,GAAGhJ,QAAQ,CAACwH,aAAT,CAAuBqB,OAAvB,CAAjB;AACAG,YAAU,CAACL,YAAX,CAAwB,IAAxB,EAA8BG,EAA9B;AACA,MAAI5D,OAAO,CAACuC,SAAZ,EACEuB,UAAU,CAACL,YAAX,CAAwB,OAAxB,EAAiCzD,OAAO,CAACuC,SAAzC;AACF,MAAIvC,OAAO,CAACwC,QAAZ,EACEsB,UAAU,CAACC,OAAX,GAAqB/D,OAAO,CAACwC,QAA7B;AACFqB,eAAa,CAACN,WAAd,CAA0BO,UAA1B;AACA,SAAOA,UAAP;AACD;AAEM,SAASE,YAAT,CAAsBN,QAAtB,EAAgCO,QAAhC,EAA0CC,UAA1C,EAAoE;AAAA,MAAdlE,OAAc,uEAAJ,EAAI;AACzE,MAAImE,SAAS,GAAG7B,aAAa,CAACoB,QAAD,EAAW,QAAX,EAAqBO,QAArB,EAA+BjE,OAA/B,CAA7B;AACA,MAAIoE,IAAI,GAAGtJ,QAAQ,CAACwI,cAAT,CAAwBY,UAAxB,CAAX;AACAC,WAAS,CAACZ,WAAV,CAAsBa,IAAtB;AACD;AAEM,SAASlH,aAAT,CAAuBwG,QAAvB,EAAiCE,EAAjC,EAAqCQ,IAArC,EAAyD;AAAA,MAAdpE,OAAc,uEAAJ,EAAI;AAC9D,MAAI6D,aAAa,GAAG/I,QAAQ,CAACgI,cAAT,CAAwBY,QAAxB,CAApB;AACA,MAAII,UAAU,GAAGhJ,QAAQ,CAACwH,aAAT,CAAuB,KAAvB,CAAjB;AACA,MAAI+B,WAAW,GAAGvJ,QAAQ,CAACwI,cAAT,CAAwBc,IAAxB,CAAlB;AACAN,YAAU,CAACP,WAAX,CAAuBc,WAAvB;AACAP,YAAU,CAACL,YAAX,CAAwB,IAAxB,EAA8BG,EAA9B;AACA,MAAI5D,OAAO,CAACuC,SAAZ,EACEuB,UAAU,CAACL,YAAX,CAAwB,OAAxB,EAAiCzD,OAAO,CAACuC,SAAzC;AACF,MAAIvC,OAAO,CAACwC,QAAZ,EACEsB,UAAU,CAACC,OAAX,GAAqB/D,OAAO,CAACwC,QAA7B;AACFqB,eAAa,CAACN,WAAd,CAA0BO,UAA1B;AACA,SAAOA,UAAP;AACD;AAEM,SAAShF,aAAT,CAAuB8E,EAAvB,EAA2B;AAChC,MAAID,OAAO,GAAG7I,QAAQ,CAACgI,cAAT,CAAwBc,EAAxB,CAAd;AACAD,SAAO,CAACZ,UAAR,CAAmBuB,WAAnB,CAA+BX,OAA/B;AACD,C,CAED;;AAEO,IAAMvE,KAAb;AACE,mBAAe;AAAA;;AACb,SAAKmF,UAAL,GAAkB,CAAlB;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKC,GAAL,GAAW,EAAX;AACD;;AALH;AAAA;AAAA,6BAOWtF,CAPX,EAOc;AACV,WAAKsF,GAAL,CAAS9H,IAAT,CAAcwC,CAAd;AACA,WAAKqF,WAAL;AACD;AAVH;AAAA;AAAA,+BAYa;AACT,WAAKA,WAAL;AACA,WAAKD,UAAL;AACA,aAAO,KAAKE,GAAL,CAAS,KAAKF,UAAL,GAAgB,CAAzB,CAAP;AACD;AAhBH;AAAA;AAAA,6BAkBW;AACP,aAAO,KAAKC,WAAZ;AACD;AApBH;;AAAA;AAAA;AAuBO,IAAMtD,aAAb;AACC,yBAAYwD,EAAZ,EAAgB;AAAA;;AACd,SAAKD,GAAL,GAAW,CAAC,CAAC,CAAC,GAAF,EAAO,CAAC,GAAR,CAAD,CAAX;AACA,SAAKC,EAAL,GAAUA,EAAV;AACD;;AAJF;AAAA;AAAA,6BAMS;AACN,aAAO,KAAKD,GAAL,CAAS5E,MAAT,GAAgB,CAAvB;AACF;AARD;AAAA;AAAA,gCAUY;AACV,aAAO,KAAKA,MAAL,EAAP;AACD;AAZD;AAAA;AAAA,wBAcI8D,OAdJ,EAca;AACX,WAAKc,GAAL,CAAS9H,IAAT,CAAcgH,OAAd;AACA,WAAKgB,IAAL,CAAU,KAAKC,SAAL,EAAV;AACD;AAjBD;AAAA;AAAA,yBAmBKC,KAnBL,EAmBY;AACV,aAAOzG,IAAI,CAACC,KAAL,CAAWwG,KAAK,GAAC,CAAjB,IAAsB,CAAtB,IAA2B,KAAKH,EAAL,CAAQ,KAAKD,GAAL,CAASrG,IAAI,CAACC,KAAL,CAAWwG,KAAK,GAAC,CAAjB,CAAT,CAAR,EAAuC,KAAKJ,GAAL,CAASI,KAAT,CAAvC,KAA2D,CAA7F,EAAgG;AAC9F,aAAKC,IAAL,CAAU1G,IAAI,CAACC,KAAL,CAAWwG,KAAK,GAAC,CAAjB,CAAV,EAA+BA,KAA/B;AACAA,aAAK,GAAGzG,IAAI,CAACC,KAAL,CAAWwG,KAAK,GAAC,CAAjB,CAAR;AACD;AACF;AAxBD;AAAA;AAAA,0BA0BM;AACJ,UAAI,KAAKhF,MAAL,MAAiB,CAArB,EACE;AACF,UAAIkF,UAAU,GAAG,KAAKN,GAAL,CAAS,CAAT,CAAjB;AACA,UAAII,KAAK,GAAG,CAAZ;;AACA,aAAO,IAAEA,KAAF,IAAW,KAAKD,SAAL,EAAlB,EAAoC;AAClC,YAAII,IAAI,GAAG,IAAEH,KAAb;AACA,YAAIpD,KAAK,GAAG,IAAEoD,KAAF,GAAQ,CAApB;;AACA,YAAIpD,KAAK,IAAI,KAAKmD,SAAL,EAAT,IAA6B,KAAKF,EAAL,CAAQ,KAAKD,GAAL,CAAShD,KAAT,CAAR,EAAyB,KAAKgD,GAAL,CAASO,IAAT,CAAzB,KAA4C,CAAC,CAA9E,EAAiF;AAC/E,eAAKP,GAAL,CAASI,KAAT,IAAkB,KAAKJ,GAAL,CAAShD,KAAT,CAAlB;AACAoD,eAAK,GAAGpD,KAAR;AACD,SAHD,MAGO;AACL,eAAKgD,GAAL,CAASI,KAAT,IAAkB,KAAKJ,GAAL,CAASO,IAAT,CAAlB;AACAH,eAAK,GAAGG,IAAR;AACD;AACF;;AACD,UAAIH,KAAK,IAAI,KAAKD,SAAL,EAAb,EAA+B;AAC7B,aAAKE,IAAL,CAAUD,KAAV,EAAiB,KAAKD,SAAL,EAAjB;AACA,aAAKD,IAAL,CAAUE,KAAV;AACD;;AACD,WAAKJ,GAAL,CAASlD,GAAT;AACA,aAAOwD,UAAP;AACD;AAhDD;AAAA;AAAA,yBAkDOE,CAlDP,EAkDUC,CAlDV,EAkDa;AACX,UAAIC,IAAI,GAAG,KAAKV,GAAL,CAASQ,CAAT,CAAX;AACA,WAAKR,GAAL,CAASQ,CAAT,IAAc,KAAKR,GAAL,CAASS,CAAT,CAAd;AACA,WAAKT,GAAL,CAASS,CAAT,IAAcC,IAAd;AACC;AAtDH;;AAAA;AAAA;AAyDO,SAASnD,OAAT,CAAiByC,GAAjB,EAAsB;AAC3B,MAAI,EAAEA,GAAG,YAAYW,KAAjB,CAAJ,EACE,OAAOX,GAAP;AACF,SAAOA,GAAG,CAACY,GAAJ,CAAQ,UAAAC,GAAG;AAAA,WAAItD,OAAO,CAACsD,GAAD,CAAX;AAAA,GAAX,CAAP;AACD,C;;;;;;UC7HD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"bundle.js","sourcesContent":["import {MainController} from \"./main_controller\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\n  let mainControl = new MainController();\n\n});\n","import {MazeController} from \"./maze_controller\";\n\n// Constants for switching between algorithm frames\n\nconst MAZE_CONTROLLER = \"MAZE_CONTROLLER\";\n// this.mazeController\n\n\n// Main class used for switching between algorithm frames\n\nexport class MainController {\n  constructor() {\n    // set up control mechanisms for frame switching  \n\n    // set up initial frame and run code\n    this.currentFrame = MAZE_CONTROLLER;\n    this.startMazeController();\n  }\n\n  // switch controllers\n  switchFrame(newFrame) {\n    // shut down current frame\n    switch (this.currentFrame) {\n      case MAZE_CONTROLLER:\n        this.stopMazeController();\n        break;\n    }\n    // start up the new frame\n    switch (newFrame) {\n      case MAZE_CONTROLLER:\n        this.startMazeController();\n        break;\n    }\n    this.currentFrame = newFrame;\n  }\n\n  // Start maze frame\n  startMazeController() {\n    this.mazeController = new MazeController();\n  }\n\n  // shut down this.mazeController\n  stopMazeController() {\n    this.mazeController.terminate();\n    delete this.mazeController;\n  }\n}","import {Queue, PriorityQueue, deepDup, removeElement, createTextDiv} from './util';\nimport {bfsText, mouseText, manhattanText, rightText} from \"./maze_text\";\n\n// meaning of grid values\nconst EMPTY = 0;\nconst WALL = 1;\nconst START = 2;\nconst FINISH = 3;\nconst VISITED = 4;\n\n// edge of canvas, square side, square padding\nconst GRID_OFFSET = 3;\nconst SQUARE_SIDE = 17;\nconst SQUARE_PADDING = 1;\n\n// directions used in several algorithms\nconst DIRECTIONS = [[1, 0], [0, 1], [-1, 0], [0, -1]];\n\nexport class Maze {\n  constructor(width, height, canvas) {\n    // set up stuff with main canvas panel\n    this.width = width;\n    this.height = height;\n    this.canvas = canvas;\n    canvas.width = GRID_OFFSET*2 + SQUARE_SIDE*width;\n    canvas.height = GRID_OFFSET*2 + SQUARE_SIDE*height;\n    this.ctx = canvas.getContext(\"2d\");\n\n    // grid initialization\n    let row = [];\n    for (let k = 0; k < width; k++)\n      row.push(EMPTY);\n    this.grid = [];\n    for (let k = 0; k < height; k++)\n      this.grid.push(row.slice());\n\n    this.grid[0][0] = START;\n    this.grid[this.width-1][this.height-1] = FINISH;\n\n    // maze building & solving initialization \n    this.mazeBuilderOn = true;\n    this.startMazeBuilderEvents();\n    this.solving = false;\n    this.delay = 100;\n\n    createTextDiv(\"frame_panel\", \"algo_text\", \"\");\n\n    // protecting callbacks\n    this.drawSquare = this.drawSquare.bind(this); // see if really need this at some point\n    this.solveBFS = this.solveBFS.bind(this);\n    this.mouseMove = this.mouseMove.bind(this);\n    this.solveMouse = this.solveMouse.bind(this);\n    this.solveManhattan = this.solveManhattan.bind(this);\n    this.rightMove = this.rightMove.bind(this);\n    this.solveRight = this.solveRight.bind(this);\n  }\n\n  // getters and setters\n\n  getValue(pos) {\n    return this.grid[pos[0]][pos[1]];\n  }\n\n  setValue(pos, value) {\n    this.grid[pos[0]][pos[1]] = value;\n  }\n\n  // draw entire maze\n  draw() {\n    this.ctx.fillStyle = \"grey\";\n    this.ctx.fillRect(0, 0, GRID_OFFSET * 2 + this.width * SQUARE_SIDE, GRID_OFFSET * 2 + this.height * SQUARE_SIDE);\n    for (let x = 0; x < this.width; x++) {\n      for (let y= 0; y < this.height; y++) {\n        this.drawSquare(x,y);\n      }\n    }\n  }\n\n  // draw individual square\n  drawSquare(x,y) {\n    let squareType = this.grid[x][y];\n    switch (squareType) {\n      case EMPTY:\n        this.ctx.fillStyle = \"white\";\n        break;\n      case WALL:\n        this.ctx.fillStyle = \"black\";\n        break;\n      case START:\n        this.ctx.fillStyle = \"green\";\n        break;\n      case FINISH:\n        this.ctx.fillStyle = \"red\";\n        break;\n      case VISITED:\n        this.ctx.fillStyle = \"green\";\n        break;\n      default:\n        console.log(\"Bad grid value...\" + squareType);\n    }\n    this.ctx.fillRect(GRID_OFFSET + x*SQUARE_SIDE + SQUARE_PADDING, GRID_OFFSET + y*SQUARE_SIDE + SQUARE_PADDING,\n      SQUARE_SIDE - 2*SQUARE_PADDING, SQUARE_SIDE - 2*SQUARE_PADDING );\n  }\n\n  // is mouse in mazeGrid\n  inGrid(x, y) {\n    return (x > GRID_OFFSET) && (y > GRID_OFFSET)\n      && (x < GRID_OFFSET + this.width*SQUARE_SIDE)\n      && (y < GRID_OFFSET + this.height*SQUARE_SIDE);\n  }\n\n  // convert mouse position into grid coordinates\n  convertToGrid(x, y) {\n    return [Math.floor((x-GRID_OFFSET)/SQUARE_SIDE),\n      Math.floor((y-GRID_OFFSET)/SQUARE_SIDE)\n    ];\n  }\n\n  // Flip a square between empty and wall\n  flip(x,y) {\n    if (this.grid[x][y] == this.flipTarget) {\n      this.grid[x][y] = this.grid[x][y] == WALL ? EMPTY : WALL\n      this.drawSquare(x,y);        \n    }\n  }\n\n  // Set up events for maze building\n  startMazeBuilderEvents() {\n    this.canvas.addEventListener('mousedown', e => {\n      if (this.mazeBuilderOn) {\n        if (this.inGrid(e.offsetX, e.offsetY)) {\n          let pos = this.convertToGrid(e.offsetX, e.offsetY);\n          let [x, y] = pos;\n          if (this.grid[x][y] == EMPTY || this.grid[x][y] == WALL) {\n            this.isBuilding = true;\n            this.flipTarget = this.grid[x][y];\n            this.flip(x,y);  \n          }\n        }\n      }\n    });\n  \n    this.canvas.addEventListener('mousemove', e => {\n      if (this.isBuilding) {\n        if (this.inGrid(e.offsetX, e.offsetY)) {\n          let [x, y] = this.convertToGrid(e.offsetX, e.offsetY)\n          this.flip(x, y);\n        }\n      }\n    });\n\n    this.canvas.addEventListener('mouseup', e => {\n      if (this.isBuilding) {\n        this.isBuilding = false;\n      }\n    });\n  }\n  \n  solveBFS() {\n    if (this.solving)\n      return;\n    this.solving = true;\n\n    removeElement(\"algo_text\");\n    createTextDiv(\"frame_panel\", \"algo_text\", bfsText);\n\n    this.reload();\n    let start = this.getStart();     \n    let q = new Queue;\n    let numSquares = 0;\n    q.enqueque(start);\n    while (q.length() > 0) {\n      let square = q.dequeque();\n      if (this.grid[square[0]][square[1]] === VISITED)\n        continue;\n      if (this.grid[square[0]][square[1]] === FINISH) {\n        // console.log(\"finished\");\n        setTimeout(() => this.solving = false, this.delay*(numSquares+1));\n        break;\n      }\n\n      this.grid[square[0]][square[1]] = VISITED;\n      setTimeout(() => this.drawSquare(square[0], square[1]), this.delay*(numSquares + 1));\n      numSquares++;\n      \n      for (let d=0; d<4; d++) {\n        let neighborX = square[0] + DIRECTIONS[d][0];\n        let neighborY = square[1] + DIRECTIONS[d][1];\n        if (neighborX < 0 || neighborX >= this.width || neighborY < 0 || neighborY >= this.height)\n          continue;\n        if (this.grid[neighborX][neighborY] == EMPTY || this.grid[neighborX][neighborY] == FINISH)\n          q.enqueque([neighborX, neighborY]);\n      }\n    }\n    setTimeout(() => this.solving = false, this.delay * (numSquares+1));\n  }\n\n  // locate start of maze\n  getStart() {\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        if (this.grid[x][y] == START)\n          return [x,y];\n      }\n    }\n    console.log(\"didn't find a start!\");\n  }\n\n  // locate end of maze\n  getFinish() {\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        if (this.grid[x][y] == FINISH)\n          return [x,y];\n      }\n    }\n    console.log(\"didn't find a finish!\");\n  }\n  \n  // Mouse algorithm\n  solveMouse() {\n    if (this.solving)\n      return;\n    this.solving = true;\n\n    removeElement(\"algo_text\");\n    createTextDiv(\"frame_panel\", \"algo_text\", mouseText);\n\n    this.reload();\n    let currentSquare = this.getStart();     \n    let options = this.getDirectionOptions(currentSquare);\n\n    if (options.length == 0) {\n      console.log(\"game over man, game over\");\n      return;\n    }\n    \n    this.mouseMove(currentSquare, options[0]);\n  }\n\n  mouseMove(currentSquare, currentDirection) {\n  \n    if (this.getValue(currentSquare) == FINISH) {\n      this.solving = false;\n      return;\n    }\n\n    let options = this.getDirectionOptions(currentSquare);\n    let newDirection = currentDirection;\n\n    if (options.length == 1)\n      newDirection = options[0];\n    \n    if (options.length == 2 && !options.includes(currentDirection)) {\n      options = options.filter((option) =>\n      option[0] != -1 * currentDirection[0] || option[1] != -1 * currentDirection[1]);\n      newDirection = options[0];\n    }\n\n    if (options.length == 3) {\n      options = options.filter((option) =>\n        option[0] != -1 * currentDirection[0] || option[1] != -1 * currentDirection[1]);\n      newDirection = options[Math.floor(Math.random() * options.length)];\n    }\n\n    if (this.getValue(currentSquare) == VISITED) {\n      this.setValue(currentSquare, EMPTY);\n      this.drawSquare(currentSquare[0], currentSquare[1]);\n    }\n    \n    currentSquare[0] += newDirection[0];\n    currentSquare[1] += newDirection[1];\n    \n    if (this.getValue(currentSquare) == EMPTY) \n      this.setValue(currentSquare, VISITED);\n    this.drawSquare(currentSquare[0], currentSquare[1]);\n\n    setTimeout(() => this.mouseMove(currentSquare, newDirection), this.delay);\n  }\n\n  getDirectionOptions(square) {\n    let options = [];\n    for (let d=0; d<4; d++) {\n      if (this.acceptableDirection(square, DIRECTIONS[d]))\n        options.push(DIRECTIONS[d]);\n    }\n    return options;\n  }\n\n  acceptableDirection(square, direction) {\n    let neighborX = square[0] + direction[0];\n    let neighborY = square[1] + direction[1];\n    if (neighborX < 0 || neighborX >= this.width || neighborY < 0 || neighborY >= this.height)\n      return false;\n    if (this.grid[neighborX][neighborY] == WALL)\n      return false\n    return true;\n  }\n\n  manhattan(pos1, pos2) {\n    return Math.abs(pos1[0]-pos2[0]) + Math.abs(pos1[1]-pos2[1]);\n  }\n\n  solveManhattan() {\n    if (this.solving)\n      return;\n    this.solving = true;\n\n    removeElement(\"algo_text\");\n    createTextDiv(\"frame_panel\", \"algo_text\", manhattanText);\n\n    this.reload();\n    let finish = this.getFinish();\n    let start = this.getStart();\n    let q = new PriorityQueue((pos1, pos2) => {\n      let dist1 = this.manhattan(pos1, finish);\n      let dist2 = this.manhattan(pos2, finish);\n      if (dist1 < dist2)\n        return -1;\n      else if (dist1 > dist2)\n        return 1;\n      else\n        return 0;\n    });\n    let numSquares = 0;\n    q.add(start);  \n    while (q.length() > 0) {\n      let square = q.pop();\n      if (this.grid[square[0]][square[1]] === VISITED)\n        continue;\n      if (this.grid[square[0]][square[1]] === FINISH) {\n        // console.log(\"finished\");\n        setTimeout(() => this.solving = false, this.delay*(numSquares+1));\n        break;\n      }\n\n      this.grid[square[0]][square[1]] = VISITED;\n      setTimeout(() => this.drawSquare(square[0], square[1]), this.delay*(numSquares + 1));\n      numSquares++;\n      \n      for (let d=0; d<4; d++) {\n        let neighborX = square[0] + DIRECTIONS[d][0];\n        let neighborY = square[1] + DIRECTIONS[d][1];\n        if (neighborX < 0 || neighborX >= this.width || neighborY < 0 || neighborY >= this.height)\n          continue;\n        if (this.grid[neighborX][neighborY] == EMPTY || this.grid[neighborX][neighborY] == FINISH)\n          q.add([neighborX, neighborY]);\n      }\n    }\n    setTimeout(() => this.solving = false, this.delay * (numSquares+1));\n  }\n\n  // Right algorithm routines\n\n  rightTurn(d) {\n    return (d+1)%4;\n  }\n\n  leftTurn(d) {\n    return (d+3)%4;\n  }\n\n  rightWallable(currentSquare, currentDirectionIndex) {\n    let right = this.rightTurn(currentDirectionIndex);\n    let forwardSquare = currentSquare.slice();\n    forwardSquare[0] += DIRECTIONS[right][0];\n    forwardSquare[1] += DIRECTIONS[right][1];\n    return forwardSquare[0] < 0 ||\n      forwardSquare[0] >= this.width ||\n      forwardSquare[1] < 0 ||\n      forwardSquare[1] >= this.height ||\n      this.getValue(forwardSquare) == WALL;\n  }\n\n  solveRight() {\n    if (this.solving)\n      return;\n    this.solving = true;\n\n    removeElement(\"algo_text\");\n    createTextDiv(\"frame_panel\", \"algo_text\", rightText);\n\n    this.reload();\n    let currentSquare = this.getStart();\n    let currentDirectionIndex = 0; \n\n    let options = this.getDirectionOptions(currentSquare);\n    if (options.length == 0) {\n      console.log(\"game over man, game over\");\n      return;\n    }\n\n    this.rightMove(currentSquare, currentDirectionIndex);\n  }\n\n  rightMove(currentSquare, currentDirectionIndex) {\n    if (this.getValue(currentSquare) == FINISH) {\n      this.solving = false;\n      return;\n    }\n\n    if (this.rightWallable(currentSquare, currentDirectionIndex)) {\n      while (!this.acceptableDirection(currentSquare, DIRECTIONS[currentDirectionIndex]))\n        currentDirectionIndex = this.leftTurn(currentDirectionIndex);\n    } else\n      currentDirectionIndex = this.rightTurn(currentDirectionIndex);\n\n    if (this.getValue(currentSquare) == VISITED) {\n      this.setValue(currentSquare, EMPTY);\n      this.drawSquare(currentSquare[0], currentSquare[1]);\n    }\n\n    currentSquare[0] += DIRECTIONS[currentDirectionIndex][0];\n    currentSquare[1] += DIRECTIONS[currentDirectionIndex][1];\n \n    if (this.getValue(currentSquare) == EMPTY) \n      this.setValue(currentSquare, VISITED);\n    this.drawSquare(currentSquare[0], currentSquare[1]);\n    setTimeout(() => this.rightMove(currentSquare, currentDirectionIndex), this.delay);\n  }\n  \n  // Backup and reload methods\n\n  backup() {\n    this.backupGrid = deepDup(this.grid);\n  }\n\n  reload() {\n    this.grid = deepDup(this.backupGrid);\n    this.draw();\n  }\n}","import {Maze} from \"./maze\";\nimport { createButton, createElement, createTextDiv, removeElement } from \"./util\";\nimport {createMazeText} from \"./maze_text\";\n\n// modes for MazeController\n// all use this.maze\nconst CREATE_MAZE_MODE = 'CREATE_MAZE_MODE';\nconst DEFAULT_MAZE_MODE = \"DEFAULT_MAZE_MODE\";\nconst SOLVE_MAZE_MODE = \"SOLVE_MAZE_MODE\";\nconst SOLVED_MAZE_MODE = \"SOLVED_MAZE_MODE\";\n\nexport class MazeController {\n  constructor() {\n\n    // Set up main panels we'll need for mode control\n    createElement(\"frame_panel\", \"div\", \"maze_bar\", {className: \"nav_bar\"});\n    createTextDiv(\"maze_bar\", \"create_maze_text_div\", \"Create Maze\",\n      {callback: () => this.switchMode(CREATE_MAZE_MODE), className: \"selectable_element\"})\n    createTextDiv(\"maze_bar\", \"solve_maze_text_div\", \"Solve Maze\",\n    {callback: () => this.switchMode(SOLVE_MAZE_MODE), className: \"selectable_element\"});\n\n\n    // Initialize to pure create\n    this.startMode(CREATE_MAZE_MODE);\n\n    // Protect callbacks\n    this.switchMode = this.switchMode.bind(this);\n  }\n\n  // switch modes in maze_controller\n\n  switchMode(mode) {\n    if (mode === this.currentMode)\n      return;\n    this.stopMode(this.currentMode);\n    this.startMode(mode);\n  }\n\n\n\n  // start mode\n  startMode(mode) {\n    switch (mode) {\n      case CREATE_MAZE_MODE:\n        // console.log(\"entering create_maze mode\")\n        if (this.canvas) {\n          removeElement(\"canvas\");\n        \n    }\n        createElement(\"frame_elements\", \"canvas\", \"canvas\");\n        this.canvas = document.getElementById(\"canvas\");\n        this.canvas.parentNode.insertBefore(this.canvas, document.getElementById(\"frame_panel\"))\n        this.maze = new Maze(30, 30, this.canvas);\n        this.maze.draw();\n\n        createTextDiv(\"frame_panel\", \"create_maze_text\", createMazeText);\n\n        break;\n\n        case SOLVE_MAZE_MODE:\n          // console.log(\"entering solve maze mode\");\n          this.maze.backup();\n\n\n          createTextDiv(\"frame_panel\", \"solve_bfs_text_div\", \"Solve with Breadth-First-Search\",\n            {callback: this.maze.solveBFS, className: \"selectable_element\"});\n          createTextDiv(\"frame_panel\", \"solve_mouse_text_div\", \"Solve with Random Mouse Algorithm\",\n            {callback: this.maze.solveMouse, className: \"selectable_element\"});      \n          createTextDiv(\"frame_panel\", \"solve_manhattan_text_div\", \"Solve with the Manhattan Algorithm\",\n            {callback: this.maze.solveManhattan, className: \"selectable_element\"});      \n          createTextDiv(\"frame_panel\", \"solve_right_text_div\", \"Solve with Right-Hand Rule Algorithm\",\n            {callback: this.maze.solveRight, className: \"selectable_element\"});      \n\n\n          createElement(\"frame_panel\", \"form\", \"maze_speed_form\");\n          let maze_speed_form = document.getElementById(\"maze_speed_form\");\n          let maze_speed_text = document.createTextNode(\"Adjust delay\");\n          maze_speed_form.appendChild(maze_speed_text);\n          createElement(\"maze_speed_form\", \"input\", \"maze_speed_input\");\n          let maze_speed_input = document.getElementById(\"maze_speed_input\");\n          maze_speed_input.setAttribute(\"type\", \"range\");\n          maze_speed_input.setAttribute(\"min\", \"10\");\n          maze_speed_input.setAttribute(\"max\", \"200\");\n          maze_speed_input.setAttribute(\"value\", \"80\");\n          maze_speed_input.addEventListener(\"change\", (e) => this.maze.delay = document.getElementById(\"maze_speed_input\").value);\n          break;\n    }\n    this.currentMode = mode;\n  }\n\n  // leave mode\n  stopMode(mode) {\n    switch (mode) {\n      case CREATE_MAZE_MODE:\n        // console.log(\"leaving create_maze mode\");\n        this.maze.mazeBuilderOn = false;\n        removeElement(\"create_maze_text\");\n        break;\n      case SOLVE_MAZE_MODE:\n        // console.log(\"leaving solve_maze mode\");\n        removeElement(\"algo_text\");\n        removeElement(\"solve_bfs_text_div\");\n        removeElement(\"solve_mouse_text_div\");\n        removeElement(\"solve_manhattan_text_div\");\n        removeElement(\"solve_right_text_div\");\n        removeElement(\"maze_speed_form\");\n        break;\n    }\n  }\n  \n  // shut down whole component\n  stopFrame() {\n\n    removeElement(\"maze_bar\");\n\n  }\n}","\n\nexport const createMazeText = \"Directions: simply hold the mouse down over the grid and drag the cursor to create your desired path. You can erase in the same way. When you’re ready to see your maze solved, click Solve Maze\";\nexport const bfsText = \"Breadth-first search (BFS) begins by adding the start of the maze to a queue. Next, it repeatedly dequeues the very first node of the queue, and if the node is unvisited, marks it as visited and adds all of its accessible unvisited neighbors to the queue. It’s guaranteed to find the solution for any solvable maze in linear time (with respect to the total size of the maze). Furthermore, it also finds the shortest path from start to finish (note that this is not the same thing as touching the least number of squares in the course of trying to solve the maze). Watch BFS expand uniformly in all directions without prejudice. If you create a junction of paths, you can watch the algorithm suddenly split its attention, going both directions at once.\";\nexport const mouseText = \"The Random Mouse algorithm is pretty slow. For future iterations, you may want to jam that delay slider all the way to the left. The Random Mouse algorithm is also pretty simple. Much like a mouse, it simply tries to keep going in the same direction as long as it can. As soon as it can’t, it picks a new direction randomly from the directions available. If it comes to a junction, it picks a path randomly. This algorithm can be somewhat frustrating to watch. Nevertheless, as long as the maze is actually solvable, over a long enough time period the probability that Random Mouse will solve the maze goes to infinity.\";\nexport const manhattanText = \"The Manhattan algorithm is very similar to BFS. However, whereas BFS operates according to the FIFO (“first in, first out”) logic of the queue, the Manhattan algorithm gives every node a score consisting of the sum of its horizontal and vertical absolute differences from the maze finish and, at each moment, picks the highest-scoring node next to some node it’s previously visited. It removes the node from the priority queue, marks it as visited, and adds all of its unvisited, accessible neighbors to the priority queue. Always selecting the closest node from the priority queue comes at a price, however. Adding a node and removing the closest node from the priority queue each take O(logN) time, compared to the O(1) operations of enqueueing and dequeing in BFS. Try creating a maze that gets very close to the finish, then requires swerving considerably away from it. The Manhattan algorithm will shoot straight toward the finish before having to backfill and find another way closer.\"\nexport const rightText = \"The Right-Hand Rule algorithm is something you could use in a real-life maze. Simply keep walking with your right hand always touching a wall. Under certain starting constraints pertaining to maze orientation (satisfied here), you will always reach the end of the maze. Try creating a solvable maze that the Right-Hand Rule algorithm cannot solve. You will not succeed.\";","// DOM utilities\n\nexport function createElement(parentId, element, id, options = {}) {\n  let parentElement = document.getElementById(parentId);\n  let newElement = document.createElement(element);\n  newElement.setAttribute(\"id\", id);  \n  if (options.className)\n    newElement.setAttribute(\"class\", options.className);\n  if (options.callback)\n    newElement.onclick = options.callback;\n  parentElement.appendChild(newElement);\n  return newElement;\n}\n\nexport function createButton(parentId, buttonId, buttonText, options = {}) {\n  let newButton = createElement(parentId, \"BUTTON\", buttonId, options);\n  let text = document.createTextNode(buttonText);\n  newButton.appendChild(text);\n}\n\nexport function createTextDiv(parentId, id, text, options = {}) {\n  let parentElement = document.getElementById(parentId);\n  let newElement = document.createElement(\"div\");\n  let textElement = document.createTextNode(text);\n  newElement.appendChild(textElement);\n  newElement.setAttribute(\"id\", id);  \n  if (options.className)\n    newElement.setAttribute(\"class\", options.className);\n  if (options.callback)\n    newElement.onclick = options.callback;\n  parentElement.appendChild(newElement);\n  return newElement;\n}\n\nexport function removeElement(id) {\n  let element = document.getElementById(id);\n  element.parentNode.removeChild(element);\n}\n\n// DSA utilities\n\nexport class Queue {\n  constructor () {\n    this.queueStart = 0\n    this.queueLength = 0\n    this.arr = [];\n  }\n\n  enqueque(q) {\n    this.arr.push(q);\n    this.queueLength++;\n  }\n\n  dequeque() {\n    this.queueLength--;\n    this.queueStart++;\n    return this.arr[this.queueStart-1];\n  }\n\n  length() {\n    return this.queueLength;\n  }\n}\n\nexport class PriorityQueue {\n constructor(cb) {\n   this.arr = [[-999, -999]]\n   this.cb = cb;\n }\n\nlength() {\n   return this.arr.length-1;\n}\n\nlastIndex() {\n  return this.length();\n}\n\nadd(element) {\n  this.arr.push(element);\n  this.swim(this.lastIndex());\n}\n\nswim(index) {\n  while (Math.floor(index/2) > 0 && this.cb(this.arr[Math.floor(index/2)], this.arr[index]) == 1) {\n    this.swap(Math.floor(index/2), index);\n    index = Math.floor(index/2);\n  }\n}\n \npop() {\n  if (this.length() == 0)\n    return;\n  let retElement = this.arr[1];\n  let index = 1;\n  while (2*index <= this.lastIndex()) {\n    let left = 2*index;\n    let right = 2*index+1;\n    if (right <= this.lastIndex() && this.cb(this.arr[right], this.arr[left]) == -1) {\n      this.arr[index] = this.arr[right];\n      index = right;\n    } else {\n      this.arr[index] = this.arr[left];\n      index = left;\n    }\n  }\n  if (index != this.lastIndex()) {\n    this.swap(index, this.lastIndex());\n    this.swim(index);\n  }\n  this.arr.pop();\n  return retElement;\n} \n\n  swap(a, b) {\n  let temp = this.arr[a];\n  this.arr[a] = this.arr[b];\n  this.arr[b] = temp;\n  }\n}\n\nexport function deepDup(arr) {\n  if (!(arr instanceof Array))\n    return arr\n  return arr.map(ele => deepDup(ele));\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./js/main.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}